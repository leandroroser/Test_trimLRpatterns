(width(out1) == width(bed_1)) & width(bed_1) < readlen
(width(out1) == width(bed_1)) & width(bed_1) < 150
sum((width(out1) == width(bed_1)) & width(bed_1) < 150)
length( width(bed_1) < 150)
which(width(bed_1) < 150)
fq1[which(width(bed_1) < 150)]
real<-fq1[which(width(bed_1) < 150)]
test<-out1[which(width(bed_1) < 150)]
rreal
real
test
test[1]
as.character(test[1])
as.character(test[[1]])
sread(test[[1]])
sread(test[1])
as.character(sread(test[1]))
trimLRPatterns(Rpattern = adapter1, subject = test[1])
sread(trimLRPatterns(Rpattern = adapter1, subject = test[1]))
sread(trimLRPatterns(Rpattern = adapter1, subject = test[1], with.Rindels = TRUE)
)
sread(trimLRPatterns(Rpattern = adapter1, subject = test[1], with.Rindels = TRUE, max.Rmismatch = 10))
sread(trimLRPatterns(Rpattern = adapter1, subject = test[1], with.Rindels = TRUE, max.Rmismatch = 50))
bed_1 <- as.data.frame(read.table("ecoli_1.bed",header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
bed_1
bed_1_example <- bed_1[1:1000, ]
fq1_example <- fq1[1:100]
bed_1_example
fq1_example
bed_1_example
bed_1 <- as.data.frame(read.table("ecoli_1.bed",header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
bed_1[which(bed_1[, 6] == "-"), 3:2] <- - bed_1[which(bed_1[, 6] == "-"), 2:3]
bed_2 <- as.data.frame(read.table("ecoli_2.bed",header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
bed_2[which(bed_2[, 6] == "-"), 3:2] <- - bed_2[which(bed_2[, 6] == "-"), 2:3]
bed_1_example
bed_1 <- as.data.frame(read.table("ecoli_1.bed",header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
bed_1[which(bed_1[, 6] == "-"), 3:2] <- - bed_1[which(bed_1[, 6] == "-"), 2:3]
bed_1
library(GenomicRanges)
colnames(bed_1) <- c('chr','start','end','id','score','strand')
bed_1 <- with(bed_1, GRanges(chr, IRanges(start+1, end), strand, score, id=id))
colnames(bed_2) <- c('chr','start','end','id','score','strand')
bed_2 <- with(bed_2, GRanges(chr, IRanges(start+1, end), strand, score, id=id))
bed_1
bed_1_example <- bed_1[1:1000]
fq1_example <- fq1[1:1000]
bed_1_example
fq1_example
saveRDS(fq1_example, "fq1_example.rds")
writeFastq(fq1_example, "fq1_example.fastq")
writeFastq(fq1_example, "fq1_example.fastq", compress = FALSE)
writeFastq(fq1_example, "fq1_example.fastq", compress = FALSE)
bed_1_example
as.data.frame(bed_1_example, "bed_example.txt")
as.data.frame(bed_1_example, "bed_example.txt", row.names=FALSE)
as.data.frame(bed_1_example, "bed_example.txt")
as.data.frame(bed_1_example)
write.table(as.data.frame(bed_1_example), "bed_example.txt")
fq1 <- readFastq("fq1_example.fastq")
bed  <- read.table("bed_example.txt")
bed
as(bed, "GRanges")
bed
bed <- as(bed, "GRanges")
width(bed)
fq <- readFastq("fq1_example.fastq")
bed  <- read.table("bed_example.txt")
bed <- as(bed, "GRanges")
adapter1 <-  DNAString("AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG")
adapter2 <- DNAString("AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT")
outlist <- list()
for(i in seq(0, 50, 5)) {
out <- trimLRPatterns(subject=fq, Rpattern = adapter1,
with.Rindels = FALSE, max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
fq <- readFastq("fq1_example.fastq")
bed  <- read.table("bed_example.txt")
bed <- as(bed, "GRanges")
adapter1 <-  DNAString("AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG")
outlist <- list()
outlist <- list()
for(i in seq(1, 50, 5)) {
out <- trimLRPatterns(subject=fq, Rpattern = adapter1,
with.Rindels = FALSE, max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
outlist <- list()
for(i in seq(1, 50, 1)) {
out <- trimLRPatterns(subject=fq, Rpattern = adapter1,
with.Rindels = FALSE, max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
fq <- readFastq("fq1_example.fastq")
bed  <- read.table("bed_example.txt")
bed <- as(bed, "GRanges")
adapter1 <-  DNAString("AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG")
outlist <- list()
for(i in seq(1, 50, 1)) {
out <- trimLRPatterns(subject=fq,
Rpattern = adapter1,
with.Rindels = FALSE,
max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
outlist
outlist <- do.call("rbind", outlist)
outlist
fq <- readFastq("fq1_example.fastq")
bed  <- read.table("bed_example.txt")
bed <- as(bed, "GRanges")
adapter <-  DNAString("AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG")
# summary of sensibility, specificity, positive predictive value, negative predictive value, Matthews correlation
summarize_extern <- function(out, bed, readlen) {
TP <- sum((width(out) == width(bed)) & width(bed) < readlen ) / sum(width(bed) < readlen)
TN <- sum((width(out) == width(bed)) & width(bed) == readlen) / sum(width(bed) == readlen)
FP <- sum(width(out) < width(bed)) / length(bed)
FN <- sum(width(out) > width(bed) & width(bed) < readlen ) / sum(width(bed) < readlen)
outlist <- list(SEN = TP/(TP + FN),
SPC = TN / (FP + TN),
PPV =  TP / (TP + FP),
NVP = TN/(TN+FN),
MCC = ((TP * TN) - (FP  * FN))/ sqrt((TP + FN) * (TP + FN) * (TN + FP) + (TN + FN)))
outlist
}
outlist <- list()
for(i in seq(1, 50, 1)) {
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = FALSE,
max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
outlist <- do.call("rbind", outlist)
outlist
summarize_extern(mydata[[1]], mydata[[2]])
summarize_extern(mydata[[3]], mydata[[4]])
summarize_extern(mydata[[5]], mydata[[6]])
summarize_extern(mydata[[7]], mydata[[8]])
results <- c("out_trimmomatic_PE_1P", "out_trimmomatic_PE_2P",
"out_adapterremoval_PE.pair1.truncated", "out_adapterremoval_PE.pair2.truncated",
"out_flexbar_PE_1.fastq", "out_flexbar_PE_2.fastq",
"out_skewer_paired-trimmed-pair1.fastq", "out_skewer_paired-trimmed-pair2.fastq",
"out_cutadapt_PE_1.fastq", "out_cutadapt_PE_2.fastq",
"out_fastx.R1.fastq", "out_fastx.R1.fastq")
lapply(test_pe_adapter, function(x) system(paste0("bash -e source activate /home/leandro/anaconda3/envs/conda_environment/;", x, wait = TRUE, intern = TRUE)))
mydata <- lapply(results, readFastq)
names(mydata) <- rep(c("trimmomatic", "adapterremoval", "flexbar", "skewer", "cutadapt", "fastx"), each = 2)
mydata <- mydata[unlist(lapply(mydata, length) == 365240)]
mydata <- mydata[which(!is.na(match(names(mydata), c("adapterremoval", "skewer", "cutadapt"))))]
summarize_extern(mydata[[1]], mydata[[2]])
summarize_extern(mydata[[3]], mydata[[4]])
summarize_extern(mydata[[5]], mydata[[6]])
summarize_extern(mydata[[7]], mydata[[8]])
setwd("~/Documents/FASTQCLEANER_PAPER/New_Submission")
mydata <- lapply(results, readFastq)
names(mydata) <- rep(c("trimmomatic", "adapterremoval", "flexbar", "skewer", "cutadapt", "fastx"), each = 2)
mydata <- mydata[unlist(lapply(mydata, length) == 365240)]
mydata <- mydata[which(!is.na(match(names(mydata), c("adapterremoval", "skewer", "cutadapt"))))]
summarize_extern(mydata[[1]], mydata[[2]])
summarize_extern(mydata[[3]], mydata[[4]])
summarize_extern(mydata[[5]], mydata[[6]])
summarize_extern(mydata[[7]], mydata[[8]])
summarize_extern(mydata[[1]], mydata[[2]])
summarize_extern(mydata[[3]], mydata[[4]])
summarize_extern(mydata[[5]], mydata[[6]])
summarize_extern(mydata[[7]], mydata[[8]])
mydata <- lapply(results, readFastq)
names(mydata) <- rep(c("trimmomatic", "adapterremoval", "flexbar", "skewer", "cutadapt", "fastx"), each = 2)
mydata <- mydata[unlist(lapply(mydata, length) == 365240)]
mydata <- mydata[which(!is.na(match(names(mydata), c("adapterremoval", "skewer", "cutadapt"))))]
summarize_extern(mydata[[1]], mydata[[2]])
summarize_extern(mydata[[3]], mydata[[4]])
summarize_extern(mydata[[5]], mydata[[6]])
summarize_extern(mydata[[7]], mydata[[8]])
mydata
summarize_extern(mydata[[1]], bed_1, 150)
source('~/Documents/FASTQCLEANER_PAPER/example_trimming.R')
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/example_trimming.R')
bed
as(bed, "data.frame")
write.table(as(bed, "data.frame"), "bed.txt", quote=FALSE, row.names = FALSE)
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns/example_trimming.R')
setwd("~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns")
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns/example_trimming.R')
library(ShortRead)
fq <- readFastq("fq_example.fastq")
bed  <- read.table("bed_example.txt")
bed <- as(bed, "GRanges")
library(ShortRead)
fq <- readFastq("fq_example.fastq")
bed  <- read.table("bed_example.txt")
bed
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns/example_trimming.R')
library(ShortRead)
fq <- readFastq("fq_example.fastq")
bed  <- read.table("bed_example.txt", header = TRUE)
bed <- as(bed, "GRanges")
adapter <-  DNAString("AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG")
# summary of sensibility, specificity, positive predictive value, negative predictive value, Matthews correlation
summarize_extern <- function(out, bed, readlen) {
TP <- sum((width(out) == width(bed)) & width(bed) < readlen ) / sum(width(bed) < readlen)
TN <- sum((width(out) == width(bed)) & width(bed) == readlen) / sum(width(bed) == readlen)
FP <- sum(width(out) < width(bed)) / length(bed)
FN <- sum(width(out) > width(bed) & width(bed) < readlen ) / sum(width(bed) < readlen)
outlist <- list(SEN = TP/(TP + FN),
SPC = TN / (FP + TN),
PPV =  TP / (TP + FP),
NVP = TN/(TN+FN),
MCC = ((TP * TN) - (FP  * FN))/ sqrt((TP + FN) * (TP + FN) * (TN + FP) + (TN + FN)))
outlist
}
outlist <- list()
for(i in seq(1, 50, 1)) {
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = FALSE,
max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
outlist <- do.call("rbind", outlist)
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns/example_trimming.R')
library(ShortRead)
fq <- readFastq("fq_example.fastq")
bed  <- read.table("bed_example.txt", header = TRUE)
bed <- as(bed, "GRanges")
adapter <-  DNAString("AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG")
# summary of sensibility, specificity, positive predictive value, negative predictive value, Matthews correlation
summarize_extern <- function(out, bed, readlen) {
TP <- sum((width(out) == width(bed)) & width(bed) < readlen ) / sum(width(bed) < readlen)
TN <- sum((width(out) == width(bed)) & width(bed) == readlen) / sum(width(bed) == readlen)
FP <- sum(width(out) < width(bed)) / length(bed)
FN <- sum(width(out) > width(bed) & width(bed) < readlen ) / sum(width(bed) < readlen)
outlist <- list(SEN = TP/(TP + FN),
SPC = TN / (FP + TN),
PPV =  TP / (TP + FP),
NVP = TN/(TN+FN),
MCC = ((TP * TN) - (FP  * FN))/ sqrt((TP + FN) * (TP + FN) * (TN + FP) + (TN + FN)))
outlist
}
outlist <- list()
for(i in seq(1, 50, 1)) {
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = FALSE,
max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
outlist <- do.call("rbind", outlist)
outlist
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns/example_trimming.R')
library(ShortRead)
fq <- readFastq("fq_example.fastq")
bed  <- read.table("bed_example.txt", header = TRUE)
bed <- as(bed, "GRanges")
adapter <-  DNAString("AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG")
# summary of sensibility, specificity, positive predictive value, negative predictive value, Matthews correlation
summarize_extern <- function(out, bed, readlen) {
TP <- sum((width(out) == width(bed)) & width(bed) < readlen ) / sum(width(bed) < readlen)
TN <- sum((width(out) == width(bed)) & width(bed) == readlen) / sum(width(bed) == readlen)
FP <- sum(width(out) < width(bed)) / length(bed)
FN <- sum(width(out) > width(bed) & width(bed) < readlen ) / sum(width(bed) < readlen)
outlist <- list(SEN = TP/(TP + FN),
SPC = TN / (FP + TN),
PPV =  TP / (TP + FP),
NVP = TN/(TN+FN),
MCC = ((TP * TN) - (FP  * FN))/ sqrt((TP + FN) * (TP + FN) * (TN + FP) + (TN + FN)))
outlist
}
outlist <- list()
for(i in seq(1, 50, 1)) {
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = TRUE,
max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
outlist <- do.call("rbind", outlist)
outlist
library(ShortRead)
fq <- readFastq("fq_example.fastq")
bed  <- read.table("bed_example.txt", header = TRUE)
bed <- as(bed, "GRanges")
adapter <-  DNAString("AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG")
# summary of sensibility, specificity, positive predictive value, negative predictive value, Matthews correlation
summarize_extern <- function(out, bed, readlen) {
TP <- sum((width(out) == width(bed)) & width(bed) < readlen ) / sum(width(bed) < readlen)
TN <- sum((width(out) == width(bed)) & width(bed) == readlen) / sum(width(bed) == readlen)
FP <- sum(width(out) < width(bed)) / length(bed)
FN <- sum(width(out) > width(bed) & width(bed) < readlen ) / sum(width(bed) < readlen)
outlist <- list(SEN = TP/(TP + FN),
SPC = TN / (FP + TN),
PPV =  TP / (TP + FP),
NVP = TN/(TN+FN),
MCC = ((TP * TN) - (FP  * FN))/ sqrt((TP + FN) * (TP + FN) * (TN + FP) + (TN + FN)))
outlist
}
outlist <- list()
for(i in seq(1, 50, 1)) {
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
outlist <- do.call("rbind", outlist)
outlist
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns/example_trimming.R')
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns/example_trimming.R')
outlist
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns/example_trimming.R')
outlist
?trimLRPatterns
maxMismatches <- as.integer(0.2 * 1:50)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches)
out
summarize_extern(out, bed, 150)
maxMismatches <- as.integer(0.5 * 1:50)
summarize_extern(out, bed, 150)
maxMismatches <- as.integer(0.8 * 1:50)
summarize_extern(out, bed, 150)
maxMismatches <- as.integer(0.8 * 1:100)
summarize_extern(out, bed, 150)
maxMismatches <- as.integer(0.8 * 1:100)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches)
maxMismatches <- as.integer(0.8 * 1:50)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches)
summarize_extern(out, bed, 150)
maxMismatches <- as.integer(0.5 * 1:50)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches)
summarize_extern(out, bed, 150)
maxMismatches <- as.integer(0.6 * 1:50)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches)
summarize_extern(out, bed, 150)
maxMismatches <- as.integer(0.3 * 1:50)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches)
summarize_extern(out, bed, 150)
maxMismatches <- as.integer(0.3 * 1:60)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches)
summarize_extern(out, bed, 150)
maxMismatches <- as.integer(0.3 * 1:70)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches)
adapter2 <- paste0(adapter, rep("N", 150 - length(adapter)))
adapter2
adapter2 <- paste0(adapter, rep("N", 150 - length(adapter), collapse = ""))
adapter2
rep("N", 150 - length(adapter), collapse = ""))
rep("N", 150 - length(adapter), collapse = "")
rep("N", 150 - length(adapter)))
rep("N", 150 - length(adapter))
adapter2 <- paste0(adapter, paste0(rep("N", 150 - length(adapter)), collapse = "")
)
adapter2
out <- trimLRPatterns(subject=fq,
Rpattern = adapter2,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches)
maxMismatches <- as.integer(0.3 * 1:70)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter2,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches)
summarize_extern(out, bed, 150)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter2,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches, Rfixed = FALSE)
summarize_extern(out, bed, 150)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter2,
with.Rindels = FALSE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches, Rfixed = FALSE)
summarize_extern(out, bed, 150)
maxMismatches <- as.integer(0.5 * 1:70)
out <- trimLRPatterns(subject=fq,
Rpattern = adapter2,
with.Rindels = FALSE,
with.Lindels = TRUE,
max.Rmismatch = maxMismatches, Rfixed = FALSE)
summarize_extern(out, bed, 150)
fq
narrow(fq, start=start(bed), end=end(bed))
fq
bed
end(bed) <- end(bed) - start(bed)
end(bed) - start(bed)
start(bed)
ss<-start(bed)
start(bed) <- 1
end(bed) <- end(bed) - ss
bed
end(bed) <- end(bed) + 1
width(bed)
bed
outlist <- list()
for(i in seq(1, 100, 1)) {
out <- trimLRPatterns(subject=fq, Rfixed = FALSE,
Rpattern = adapter,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
outlist <- do.call("rbind", outlist)
outlist
outlist <- list()
for(i in seq(1, 100, 1)) {
out <- trimLRPatterns(subject=fq,
Rpattern = adapter,
max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
outlist <- do.call("rbind", outlist)
outlist
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns/example_trimming.R')
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns/example_trimming.R')
outlist
source('~/Documents/FASTQCLEANER_PAPER/New_Submission/Test_trimLRpatterns/example_trimming.R')
library(ShortRead)
fq <- readFastq("fq_example.fastq")
bed  <- read.table("bed_example.txt", header = TRUE)
bed <- as(bed, "GRanges")
adapter <-  DNAString("AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG")
# summary of sensibility, specificity, positive predictive value, negative predictive value, Matthews correlation
summarize_extern <- function(out, bed, readlen) {
TP <- sum((width(out) == width(bed)) & width(bed) < readlen ) / sum(width(bed) < readlen)
TN <- sum((width(out) == width(bed)) & width(bed) == readlen) / sum(width(bed) == readlen)
FP <- sum(width(out) < width(bed)) / length(bed)
FN <- sum(width(out) > width(bed) & width(bed) < readlen ) / sum(width(bed) < readlen)
outlist <- list(SEN = TP/(TP + FN),
SPC = TN / (FP + TN),
PPV =  TP / (TP + FP),
NVP = TN/(TN+FN),
MCC = ((TP * TN) - (FP  * FN))/ sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN)))
outlist
}
outlist <- list()
for(i in seq(1, 100, 1)) {
out <- trimLRPatterns(subject=fq, Rfixed = FALSE,
Rpattern = adapter,
with.Rindels = TRUE,
with.Lindels = TRUE,
max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 150)
}
outlist <- do.call("rbind", outlist)
outlist
library(ShortRead)
fq <- readFastq("fq_example.fastq")
bed  <- read.table("bed_example.txt", header = TRUE)
bed <- as(bed, "GRanges")
adapter <-  DNAString("AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTG")
# summary of sensibility, specificity, positive predictive value, negative predictive value, Matthews correlation
summarize_extern <- function(out, bed, readlen) {
TP <- sum((width(out) == width(bed)) & width(bed) < readlen ) / sum(width(bed) < readlen)
TN <- sum((width(out) == width(bed)) & width(bed) == readlen) / sum(width(bed) == readlen)
FP <- sum(width(out) < width(bed)) / length(bed)
FN <- sum(width(out) > width(bed) & width(bed) < readlen ) / sum(width(bed) < readlen)
outlist <- list(SEN = TP/(TP + FN),
SPC = TN / (FP + TN),
PPV =  TP / (TP + FP),
NVP = TN/(TN+FN),
MCC = ((TP * TN) - (FP  * FN))/ sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN)))
outlist
}
outlist <- list()
for(i in seq(1, 100, 1)) {
out <- trimLRPatterns(subject=fq, Rfixed = FALSE,
Rpattern = adapter,
with.Rindels = TRUE,
max.Rmismatch = i)
outlist[[i]] <-summarize_extern(out, bed, 100)
}
outlist <- do.call("rbind", outlist)
outlist
